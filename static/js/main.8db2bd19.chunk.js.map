{"version":3,"sources":["assets/noimageblack.png","assets/noimage.jpg","api.js","Components/Loader.js","Components/Section.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Components/Header.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Route.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["api","axios","create","baseURL","params","api_key","language","movieApi","get","id","append_to_response","term","query","tvApi","encodeURIComponent","Container","styled","div","Loader","role","aria-label","Title","span","Grid","Section","title","children","Text","props","color","Message","text","Mobile","isMobile","Image","bgUrl","Rating","ImageContainer","EnTitle","Year","Poster","imageUrl","en_title","rating","year","isMovie","to","require","default","HomePresenter","nowPlaying","upcoming","popular","error","loading","length","map","movie","original_title","poster_path","vote_average","release_date","substring","HomeContainer","state","a","data","results","this","setState","React","Component","Form","form","Input","input","SearchPresenter","movieResults","tvResults","handleSubmit","searchTerm","updateTerm","lastTerm","isenterkey","onSubmit","placeholder","value","onChange","onKeyUp","show","name","original_name","SearchContainer","event","preventDefault","searchbyTerm","key","target","TVPresenter","topRated","airingToday","first_air_date","TVContainer","SHeader","header","List","ul","Item","li","current","SLink","Link","withRouter","pathname","location","Backdrop","bgImage","Cover","img","Content","Data","h3","h2","ItemContainer","Divider","Overview","p","DetailPresenter","result","backdrop_path","src","substr","runtime","episode_run_time","genres","genre","index","overview","DetailContainer","match","push","history","includes","parsedID","Number","isNaN","request","RenderRouter","path","exact","component","Home","TV","Search","Detail","from","globalStyles","createGlobalStyle","reset","App","className","Route","GlobalStyles","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8db2bd19.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/noimageblack.8b220d79.png\";","export default __webpack_public_path__ + \"static/media/noimage.7a6d492e.jpg\";","import axios from \"axios\";\r\n\r\n//axios란 http비동기 통신 라이브러리로 api 데이터를 요청하는데 도움을 주는\r\n//라이브러리 입니다.\r\n//아래 코드는 axios 환경설정을 통해 기초 정보를 입력하여 api객체를 생성하는 역할을 한다.\r\nconst api = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3/\", //api 요청 주소의 동일한 기초 url주소를 입력해줍니다.\r\n  params: {\r\n    api_key: \"0d8610c6e6d2fe61811da428334a29e0\",\r\n    language: \"ko-KR\",\r\n  },\r\n});\r\n\r\n// api.get(\"tv/popular\"); //앞에 /를 붙이지 않도록 주의하자. /를 붙이지 않아야 상대경로로 가져올수 있다.\r\n\r\n// movieApi와 tvApi 객체를 각각 만들어 axios를 통해 생성한 api 객체에서 property data를 가져와 입력해준다.\r\nexport const movieApi = {\r\n  nowPlaying: () => api.get(\"movie/now_playing\"), //객체의 프로퍼티에 함수를 넣을수도 있다. 이를 메소드라고 한다.\r\n  upcoming: () => api.get(\"movie/upcoming\"), // 이는 upcoming: function() {api.get(\"movie/upcoming\") }과 같은 의미를 가진다.\r\n  popular: () => api.get(\"movie/popular\"),\r\n  movieDetail: (id) =>\r\n    api.get(`movie/${id}`, {\r\n      params: {\r\n        append_to_response: \"videos\", //api에서 append_to_reponse를 지원해야... id에 페러미터를 덧붙여서 해당 자료를 추가로 가져온다.\r\n      },\r\n    }),\r\n  search: (term) =>\r\n    api.get(\"search/movie\", {\r\n      params: {\r\n        query: (term), //사용자가 입력하는 query를 URI로 인코딩 해야한다. (documentation 참조!) 근데 이거 하면 한글검색 안되서 지워버림 ㅋㅋ\r\n      },\r\n    }),\r\n};\r\n\r\nexport const tvApi = {\r\n  topRated: () => api.get(\"tv/top_rated\"),\r\n  popular: () => api.get(\"tv/popular\"),\r\n  airingToday: () => api.get(\"tv/airing_today\"),\r\n  showDetail: (id) =>\r\n    api.get(`tv/${id}`, {\r\n      params: {\r\n        append_to_response: \"videos\",\r\n      },\r\n    }),\r\n  search: (term) =>\r\n    api.get(\"search/tv\", {\r\n      params: {\r\n        query: encodeURIComponent(term),\r\n      },\r\n    }),\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items:center;\r\n  font-size: 28px;\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst Loader = () => (\r\n  <Container>\r\n    <span role=\"img\" aria-label=\"Loading...\">\r\n      🕔\r\n    </span>\r\n  </Container>\r\n);\r\n\r\n//https://happycording.tistory.com/entry/HTML-Role-%EC%99%9C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%EB%A7%8C-%ED%95%98%EB%8A%94%EA%B0%80\r\n//span role에 관한 내용\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  :not(:last-child) {\r\n    margin-bottom: 50px;\r\n  }\r\n`;\r\n//위 표현에 유의하자. 일반 css라면 div:not:last-child{내용}식으로 나타냈겠지만..\r\n//여기서는 그렇게 할 수 없으므로 위같이 사용한다.\r\n//책의 일반 구조 선택자 파트를 다시한번 열어보자.\r\n\r\nconst Title = styled.span`\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst Grid = styled.div`\r\n  margin-top: 25px;\r\n  display:grid;\r\n  grid-template-columns:repeat(auto-fill,125px);\r\n  grid-gap:25px;\r\n  @media screen and (max-width: 15cm) {\r\n    justify-content:center;}\r\n`;\r\n\r\nconst Section = ({ title, children }) => (\r\n  //여기서 children의 개념이 중요하다. 이 section이란 react component는\r\n  //각 route presenter component에서 값을 받아 올텐데, childre은 <Section></Section>태그 사이에\r\n  //입력한 값을 받아오는 역할을 한다!\r\n  <Container>\r\n    <Title>{title}</Title>\r\n    <Grid>{children}</Grid>\r\n  </Container>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: propTypes.string.isRequired,\r\n  children: propTypes.oneOfType([\r\n    propTypes.node,\r\n    propTypes.arrayOf(propTypes.node), //구글 검색 복사\r\n  ]),\r\n};\r\n\r\nexport default Section;\r\n","import propTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  width: 100vw;\r\n  display: flex;\r\n  justify-content: center;\r\n  \r\n`;\r\n\r\nconst Text = styled.span`\r\n  color: ${(props) => props.color};\r\n  //이부분에 유의... props 부위엔 뭘 넣어도 상관이 없고, 해당 호출 객체의 color값에 접근할 수 있게 해준다!\r\n  //다른 값에도 접근할수 있을것으로 보인다. 화살표 함수와 styled component라 가능한 css문법인거 같다.\r\n`;\r\n\r\nconst Message = ({ text, color }) => (\r\n  <Container>\r\n    <Text color={color}>{text}</Text>\r\n  </Container>\r\n);\r\n\r\nMessage.propTypes = {\r\n  text: propTypes.string.isRequired,\r\n  color: propTypes.string.isRequired,\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {isMobile} from \"react-device-detect\";\r\n\r\nconst Mobile = isMobile;\r\n\r\nconst Container = styled.div`\r\n  font-size: 12px;\r\n`;\r\n\r\nconst Image = styled.div`\r\n  background-image: url(${(props) => props.bgUrl}); //이부분도 중요합니다!!\r\n  height: 180px;\r\n  background-size: contain; //요부분 다시 공부필요~\r\n  border-radius: 4px;\r\n  background-position: center center;\r\n  transition: opacity 0.1s linear; //transition에 :속성을 넣어서 한가지 속성만 조절할수 있다.\r\n`;\r\n\r\nconst Rating = styled.div`\r\n  position: absolute;\r\n  top: 160px;\r\n  right: 5px;\r\n  opacity: 0;\r\n  transition: opacity 0.1s linear;\r\n  &[color=\"true\"]{ opacity:1; z-index:2}\r\n  \r\n`;\r\n\r\nconst ImageContainer = styled.div`\r\n  //Image 요소에 접근하려면 Imagecontainer가 Image보다 더 뒤에 있어야 한다.\r\n  margin-bottom: 5px;\r\n  :hover {\r\n    ${Image} {\r\n      opacity: 0.3;\r\n    }\r\n    ${Rating} {\r\n      opacity: 1;\r\n      \r\n    }\r\n    \r\n  }\r\n  position: relative;\r\n\r\n`;\r\n\r\nconst Title = styled.div`\r\n  display: block;\r\n  margin-bottom: 5px;\r\n  font-weight: bold;\r\n  font-size: 13px;\r\n`;\r\n\r\nconst EnTitle = styled.div`\r\n  margin-bottom: 3px;\r\n`;\r\n\r\nconst Year = styled.div`\r\n  font-size: 10px;\r\n  color: rgba(255, 255, 255, 0.5);\r\n`;\r\n\r\nconst Poster = ({\r\n  id,\r\n  imageUrl,\r\n  en_title,\r\n  title,\r\n  rating,\r\n  year,\r\n  isMovie = false,\r\n  isMobile = Mobile\r\n}) => (\r\n  <Link to={isMovie ? `/wooflix/movie/${id}` : `/wooflix/show/${id}`}>\r\n    <Container>\r\n      <ImageContainer>\r\n        <Image\r\n          bgUrl={\r\n            imageUrl\r\n              ? `https://image.tmdb.org/t/p/w300${imageUrl}`\r\n              : require(\"../assets/noimageblack.png\").default\r\n          }\r\n        ></Image>\r\n        <Rating color={`${isMobile}`}>\r\n          <span role=\"img\" aria-label=\"rating\">\r\n            ⭐\r\n          </span>\r\n          {rating}/10{\" \"}\r\n        </Rating>\r\n      </ImageContainer>\r\n      <Title>{title}</Title>\r\n      <EnTitle>{title === en_title ? \"\" : en_title}</EnTitle>\r\n      <Year>{year}</Year>\r\n    </Container>\r\n  </Link>\r\n);\r\n//require문법 공부해야함!\r\n//require로 이미지를 object의 형태로 가져오기때문에 .default로 해야 이미지에 접근됨.\r\n\r\n//콘솔의 네트워크를 살펴보면 components끼리 전달되는 내용을 확인할 수 있다.\r\n\r\nPoster.propTypes = {\r\n  id: propTypes.number.isRequired,\r\n  imageUrl: propTypes.string,\r\n  title: propTypes.string.isRequired,\r\n  rating: propTypes.number,\r\n  year: propTypes.string,\r\n  isMovie: propTypes.bool,\r\n};\r\n\r\nexport default Poster;\r\n","import propTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Section from \"../../Components/Section\";\r\nimport Message from \"../../Components/Message\";\r\nimport Poster from \"../../Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst HomePresenter = ({ nowPlaying, upcoming, popular, error, loading }) =>\r\n  loading ? (\r\n    <Loader /> //loading이 true인지 false인지 먼저 검사한다. 왜냐하면 loading이 끝나기 전에는 해당 값들이 들어와 있지 않기 때문이다.\r\n  ) : (\r\n    <Container>\r\n      {nowPlaying && nowPlaying.length > 0 && (\r\n        <Section title=\"Now playing\">\r\n          {nowPlaying.map((movie) => (\r\n            <Poster\r\n              key={movie.id}\r\n              id={movie.id}\r\n              en_title={movie.original_title}\r\n              title={movie.title}\r\n              imageUrl={movie.poster_path}\r\n              rating={movie.vote_average}\r\n              year={movie.release_date && movie.release_date.substring(0, 4)} //해당 내용이 있는지 확인후 substring을 적용시켜야 에러 가능성이 없어진다.\r\n              isMovie={true}\r\n            ></Poster>\r\n          ))}\r\n        </Section>\r\n      )}\r\n      {upcoming && upcoming.length > 0 && (\r\n        <Section title=\"Upcoming Movies\">\r\n          {upcoming.map((movie) => (\r\n            <Poster\r\n              key={movie.id}\r\n              id={movie.id}\r\n              en_title={movie.original_title}\r\n              title={movie.title}\r\n              imageUrl={movie.poster_path}\r\n              rating={movie.vote_average}\r\n              year={movie.release_date && movie.release_date.substring(0, 4)} //해당 내용이 있는지 확인후 substring을 적용시켜야 에러 가능성이 없어진다.\r\n              isMovie={true}\r\n            ></Poster>\r\n          ))}\r\n        </Section>\r\n      )}\r\n      {popular && popular.length > 0 && (\r\n        <Section title=\"Popular Movies\">\r\n          {popular.map((movie) => (\r\n            <Poster\r\n              key={movie.id}\r\n              id={movie.id}\r\n              en_title={movie.original_title}\r\n              title={movie.title}\r\n              imageUrl={movie.poster_path}\r\n              rating={movie.vote_average}\r\n              year={movie.release_date && movie.release_date.substring(0, 4)} //해당 내용이 있는지 확인후 substring을 적용시켜야 에러 가능성이 없어진다.\r\n              isMovie={true}\r\n            ></Poster>\r\n          ))}\r\n        </Section>\r\n      )}\r\n      {error && <Message text={error} color={\"#e74c3c\"} />}\r\n    </Container>\r\n  );\r\n//3중으로 체크한다. nowPlying이 있는지, 0보다 길이가 긴지, 제대로 렌더링 되었는지. 모두 true면 마지막 값을 return 한다.\r\n//<Section>aaaa</Section>에서 aaaa에 해당하는 부분이 Section component의 childre으로 전달된다.\r\n\r\nHomePresenter.propTypes = {\r\n  nowPlaying: propTypes.array,\r\n  upcoming: propTypes.array,\r\n  popular: propTypes.array,\r\n  error: propTypes.string,\r\n  loading: propTypes.bool.isRequired,\r\n};\r\n\r\nexport default HomePresenter;\r\n","import HomeContainer from\"./HomeContainer\";\r\n\r\nexport default HomeContainer;","import React from \"react\";\r\nimport { movieApi } from \"../../api\";\r\nimport HomePresenter from \"./HomePresenter\";\r\n\r\n\r\nclass HomeContainer extends React.Component {\r\n  //원래는 생성자를 통해 (constructor() {super(props); this.state ={}...) state초기값 property를\r\n  //설정 하여야 하나, 최신 javascript의 class field시스템 덕분에 아래처럼 바로 state ={}어쩌구로 \r\n  //생성자 없이 사용이 가능하다.\r\n  \r\n  state = {\r\n    nowPlaying: null,\r\n    upcoming: null,\r\n    popular: null,\r\n    error: null, //여기랑\r\n    loading: true, //여기 잘 모르겠다.. state 공부를 하면 알게되나!\r\n  }; \r\n\r\n\r\n\r\n  //두가지 옵션이 있다. 하나의 함수로 모든 api를 처리하든지,\r\n  //아니면 nowPlaying, upcoming, popular 다른 함수로 각각 처리하든지.\r\n  async componentDidMount() {\r\n    //함수내에서 비동기 함수를 시행하려면 해당 함수에도 async가 붙어야 한다.\r\n    try {\r\n      const {\r\n        data: { results: nowPlaying }, //data의 results를 nowPlaying이라는 이름으로 가져온다.\r\n      } = await movieApi.nowPlaying(); //객체내 nowplaying 메소드가 완료될때까지 기다린다.\r\n\r\n      const {\r\n        data: { results: upcoming },\r\n      } = await movieApi.upcoming();\r\n\r\n      const {\r\n        data: { results: popular },\r\n      } = await movieApi.popular();\r\n\r\n      this.setState({\r\n        nowPlaying: nowPlaying,\r\n        upcoming: upcoming,\r\n        popular: popular,\r\n      }); //이렇게 쓰는게 정석이나 자바스크립트에서는 이름이 같을경우 짧게 뒤쪽을 생략하여 \r\n      //nowPlaying, upcoming, popular만 적어줘도 관계없다.\r\n\r\n\r\n    } catch {\r\n      this.setState({\r\n        error: \"Cant't find movie information\",\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  //위함수들로 모든 api데이터를 처리한다음...\r\n\r\n  //이 아래쪽에서 Homepresenter로 보내서 보여주는 처리를 하게 된다!\r\n  //이것이 container와 presenter의 분리이다.\r\n  render() {\r\n    const { nowPlaying, upcoming, popular, error, loading } = this.state;\r\n    return (\r\n      <HomePresenter\r\n        nowPlaying={nowPlaying}\r\n        upcoming={upcoming}\r\n        popular={popular}\r\n        error={error}\r\n        loading={loading}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomeContainer;\r\n","import propTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Section from \"../../Components/Section\";\r\nimport Message from \"../../Components/Message\";\r\nimport Poster from \"../../Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n  padding: 0 20px;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  margin-bottom: 50px;\r\n  width: 100%;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  all: unset; //모든 속성을 초기화.\r\n  width: 100%;\r\n  font-size: 28px;\r\n`;\r\n\r\nconst SearchPresenter = ({\r\n  movieResults,\r\n  tvResults,\r\n  error,\r\n  loading,\r\n  handleSubmit,\r\n  searchTerm,\r\n  updateTerm,\r\n  lastTerm,\r\n  isenterkey,\r\n}) => (\r\n  <Container>\r\n    <Form onSubmit={handleSubmit}>\r\n      <Input\r\n        placeholder=\"Search Movies or TV-Shows....\"\r\n        value={searchTerm}\r\n        onChange={updateTerm}\r\n        onKeyUp={isenterkey}\r\n      ></Input>\r\n    </Form>\r\n    {loading ? (\r\n      <Loader />\r\n    ) : (\r\n      <>\r\n        {movieResults && movieResults.length > 0 && (\r\n          <Section title=\"Movie Results\">\r\n            {movieResults.map((movie) => (\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                en_title={movie.original_title}\r\n                title={movie.title}\r\n                imageUrl={movie.poster_path}\r\n                rating={movie.vote_average}\r\n                year={movie.release_date && movie.release_date.substring(0, 4)} //해당 내용이 있는지 확인후 substring을 적용시켜야 에러 가능성이 없어진다.\r\n                isMovie={true}\r\n              ></Poster>\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {tvResults && tvResults.length > 0 && (\r\n          <Section title=\"TV Show Results\">\r\n            {tvResults.map((show) => (\r\n              <Poster\r\n                key={show.id}\r\n                id={show.id}\r\n                title={show.name}\r\n                en_title={show.original_name}\r\n                imageUrl={show.poster_path}\r\n                rating={show.vote_average}\r\n                year={show.release_date && show.release_date.substring(0, 4)} //해당 내용이 있는지 확인후 substring을 적용시켜야 에러 가능성이 없어진다.\r\n              ></Poster>\r\n            ))}\r\n          </Section>\r\n        )}\r\n      </>\r\n    )}\r\n    {error && <Message color={\"#e74c3c\"} text={error} />}\r\n    {tvResults &&\r\n      movieResults &&\r\n      tvResults.length === 0 &&\r\n      movieResults.length === 0 && (\r\n        <Message color={\"#95a5a6\"} text={`Nothing found for: ${lastTerm}`} />\r\n      )}\r\n  </Container>\r\n);\r\n//input form에 value만 넣을 경우 해당 input은 read-only가 되어버린다.\r\n//onChange를 넣어줌으로써 이를 막을수 있다.\r\n\r\nSearchPresenter.propTypes = {\r\n  movieResults: propTypes.array,\r\n  tvResults: propTypes.array,\r\n  searchTerm: propTypes.string,\r\n  error: propTypes.string,\r\n  loading: propTypes.bool.isRequired,\r\n  handleSubmit: propTypes.func.isRequired,\r\n  updateTerm: propTypes.func.isRequired,\r\n  isenterkey: propTypes.func.isRequired,\r\n};\r\n\r\nexport default SearchPresenter;\r\n","import SearchContainer from \"./SearchContainer\";\r\n\r\nexport default SearchContainer;","import React from \"react\";\r\nimport { movieApi, tvApi } from \"../../api\";\r\nimport SearchPresenter from \"./SearchPresenter\";\r\n\r\nclass SearchContainer extends React.Component {\r\n  state = {\r\n    movieResults: null,\r\n    tvResults: null,\r\n    searchTerm: \"\",\r\n    error: null,\r\n    loading: false, //사용자가 검색하기를 기다렸다 로딩하기 위함.\r\n    lastTerm: \"\",\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault(); //원래 enter를 치면 search내용이 submit되나, 이때 화면을 refresh한다. 이를 막기위해 넣는다.\r\n    const { searchTerm } = this.state;\r\n    if (searchTerm !== \"\") {\r\n      this.searchbyTerm();\r\n    }\r\n  };\r\n\r\n  isenterkey = async (event) => {\r\n    if (event.key === \"Enter\")\r\n      await this.setState({ lastTerm: event.target.value });\r\n  };\r\n\r\n  updateTerm = (event) => {\r\n    //이 event를 console.log 해서 어떠한 정보가 전달되는지 확인하고 그에 맞춰 로직을 설계한다.\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    this.setState({ searchTerm: value }); //이부분은 그냥 공식처럼 외워주는게 좋겠다..\r\n  };\r\n\r\n  searchbyTerm = async () => {\r\n    const { searchTerm } = this.state;\r\n    try {\r\n      this.setState({ loading: true });\r\n      const {\r\n        data: { results: movieResults },\r\n      } = await movieApi.search(searchTerm);\r\n      const {\r\n        data: { results: tvResults },\r\n      } = await tvApi.search(searchTerm);\r\n      this.setState({ movieResults, tvResults });\r\n    } catch {\r\n      this.setState({ error: \"Can't find results.\" });\r\n    } finally {\r\n      this.setState({ loading: false });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      movieResults,\r\n      tvResults,\r\n      searchTerm,\r\n      error,\r\n      loading,\r\n      lastTerm,\r\n    } = this.state;\r\n    return (\r\n      <SearchPresenter\r\n        error={error}\r\n        loading={loading}\r\n        movieResults={movieResults}\r\n        tvResults={tvResults}\r\n        searchTerm={searchTerm}\r\n        lastTerm={lastTerm}\r\n        handleSubmit={this.handleSubmit}\r\n        updateTerm={this.updateTerm}\r\n        isenterkey={this.isenterkey}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchContainer;\r\n","import propTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Message from \"../../Components/Message\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Section from \"../../Components/Section\";\r\nimport Poster from \"../../Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n  padding: 0 20px;\r\n`;\r\n\r\nconst TVPresenter = ({ topRated, popular, airingToday, error, loading }) =>\r\n  loading ? (\r\n    <Loader />\r\n  ) : (\r\n    <Container>\r\n      {topRated && topRated.length > 0 && (\r\n        <Section title=\"Top Rated Shows\">\r\n          {topRated.map((show) => (\r\n            <Poster\r\n              key={show.id}\r\n              id={show.id}\r\n              title={show.name}\r\n              en_title={show.original_name}\r\n              imageUrl={show.poster_path}\r\n              rating={show.vote_average}\r\n              year={show.first_air_date && show.first_air_date.substring(0, 4)} //해당 내용이 있는지 확인후 substring을 적용시켜야 에러 가능성이 없어진다.\r\n            ></Poster>\r\n          ))}\r\n        </Section>\r\n      )}\r\n\r\n      {popular && popular.length > 0 && (\r\n        <Section title=\"Popular TV Shows\">\r\n          {popular.map((show) => (\r\n            <Poster\r\n              key={show.id}\r\n              id={show.id}\r\n              title={show.name}\r\n              en_title={show.original_name}\r\n              imageUrl={show.poster_path}\r\n              rating={show.vote_average}\r\n              year={show.first_air_date && show.first_air_date.substring(0, 4)} //해당 내용이 있는지 확인후 substring을 적용시켜야 에러 가능성이 없어진다.\r\n            ></Poster>\r\n          ))}\r\n        </Section>\r\n      )}\r\n\r\n      {airingToday && airingToday.length > 0 && (\r\n        <Section title=\"Airing Today\">\r\n          {airingToday.map((show) => (\r\n            <Poster\r\n              key={show.id}\r\n              id={show.id}\r\n              title={show.name}\r\n              en_title={show.original_name}\r\n              imageUrl={show.poster_path}\r\n              rating={show.vote_average}\r\n              year={show.first_air_date && show.first_air_date.substring(0, 4)} //해당 내용이 있는지 확인후 substring을 적용시켜야 에러 가능성이 없어진다.\r\n            ></Poster>\r\n          ))}\r\n        </Section>\r\n      )}\r\n\r\n      {error && <Message text={error} color={\"#e74c3c\"} />}\r\n    </Container>\r\n  );\r\n//위 삼중평가 식을 잘 살펴보자. short circuit evaluation/ 단축평가라 불리는 방식이다.\r\n//앞에서부터 순서대로 검사하여 모두 true이면 마지막 값을 내보내고 중간에 하나라도 false면 중간에서 검사를\r\n//중지하고 false값을 내보낸다. ||를 사용했을 경우에는 하나라도 true가 나오면 바로 그 값을 반환한다.\r\n\r\nTVPresenter.propTypes = {\r\n  topRated: propTypes.array,\r\n  popular: propTypes.array,\r\n  airingToday: propTypes.array,\r\n  error: propTypes.string,\r\n  loading: propTypes.bool.isRequired,\r\n};\r\n\r\nexport default TVPresenter;\r\n","import TVContainer from \"./TVContainer\";\r\n\r\nexport default TVContainer;","import React from \"react\";\r\nimport { tvApi } from \"../../api\";\r\nimport TVPresenter from \"./TVPresenter\";\r\n\r\nclass TVContainer extends React.Component {\r\n  state = {\r\n    topRated: null,\r\n    popular: null,\r\n    airingToday: null,\r\n    error: null,\r\n    loading: true,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const {\r\n        data: { results: topRated },\r\n      } = await tvApi.topRated();\r\n\r\n      const {\r\n        data: { results: popular },\r\n      } = await tvApi.popular();\r\n\r\n      const {\r\n        data: { results: airingToday },\r\n      } = await tvApi.airingToday();\r\n\r\n      this.setState({topRated, popular, airingToday});\r\n    } catch {\r\n      this.setState({\r\n        error: \"Cant't find TV information\",\r\n      });\r\n    } finally {\r\n      this.setState({loading: false})\r\n    }\r\n  }\r\n\r\n  render(){ \r\n    const { topRated, popular, airingToday, error, loading } = this.state;\r\n    return (\r\n      <TVPresenter\r\n        topRated={topRated}\r\n        popular={popular}\r\n        airingToday={airingToday}\r\n        error={error}\r\n        loading={loading}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default TVContainer;\r\n","import styled from \"styled-components\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\nconst SHeader = styled.header`\r\n  color: white;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0px 10px;\r\n  background-color: rgba(20, 20, 20, 0.8);\r\n  box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\r\n  z-index: 2;\r\n`;\r\n\r\n//npa add styled-components 이후 아래와 같이 스타일을 입력할 수 있게된다.\r\nconst List = styled.ul`\r\n  display: flex;\r\n`;\r\n\r\nconst Item = styled.li`\r\n  height: 50px;\r\n  width: 50px;\r\n  text-align: center;\r\n  border-bottom: 5px solid\r\n    ${(props) => (props.current ? \"#3498db\" : \"transparent\")};\r\n  transition: border-bottom 0.5s ease-in-out;\r\n`;\r\n\r\nconst SLink = styled(Link)`\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n//react router dom의 Link를 사용하는 경우에는 위와 같이 스타일을 줄 수 있다.\r\n\r\nfunction Header({ location: { pathname } }) {\r\n  return (\r\n    <SHeader>\r\n      <List>\r\n        <Item current={pathname === \"/wooflix\"}>\r\n          <SLink to=\"/wooflix\">Movie</SLink>\r\n        </Item>\r\n        <Item current={pathname === \"/wooflix/TV\"}>\r\n          <SLink to=\"/wooflix/TV\">TV</SLink>\r\n        </Item>\r\n        <Item current={pathname === \"/wooflix/Search\"}>\r\n          <SLink to=\"/wooflix/Search\">Search</SLink>\r\n        </Item>\r\n      </List>\r\n    </SHeader>\r\n  );\r\n}\r\n\r\nexport default withRouter(Header);\r\n\r\n//withRouter는 조금더 공부 필요.. withRouter란 component가 해당 component를\r\n//wrap하여 전달하는데 이때 각종 prop들이 전달되며 이 prop들을 활용할 수 있게된다.\r\n\r\n//header.js는 react router에서 정보를 받지 않는다. route.js를 살펴보면 route에 속해있지 않기 때문이다.\r\n//그래서 header가 route 정보를 받으려면 withRouter로 decoration해줄 필요가 생기는것이다\r\n//route들, 예를 들면 TV, movie, detail등은 withRouter의 도움없이 props 정보들을 얻어올수 있다\r\n","import propTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Loader from \"../../Components/Loader\";\r\n\r\nconst Container = styled.div`\r\n  height: calc(100vh - 50px); //calc을 사용하여 계산식을 넣을수 있다.. 와우!\r\n  width: 100%;\r\n  position: relative;\r\n  padding: 50px;\r\n`;\r\n\r\nconst Backdrop = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-position: center center;\r\n  background-size: cover;\r\n  background-image: url(${(props) => props.bgImage});\r\n  filter: blur(3px);\r\n  opacity: 0.5;\r\n  z-index: 0;\r\n`;\r\n\r\nconst Cover = styled.img`\r\n  width: 30%;\r\n\r\n\r\n  height: auto;\r\n  /* display:block; */\r\n  object-fit: contain;\r\n  /* background-position: center center;\r\n  background-size: contain;\r\n  background-repeat:no-repeat;\r\n  background-image: url(${(props) => props.bgUrl}); */\r\n  /* border: 5px solid white; */\r\n  border-radius: 5px;\r\n  z-index: 1;\r\n  @media screen and (max-width: 15cm) {\r\n    width:70%;\r\n    margin-bottom:30px;\r\n  }\r\n  \r\n`;\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: 1;\r\n  align-items: center;\r\n  justify-content:center;\r\n  background-color:black;\r\n\r\n  @media screen and (max-width: 15cm) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nconst Data = styled.div`\r\n  width: 50%;\r\n  margin-left: 10px; \r\n   @media screen and (max-width: 15cm) {\r\n    width:100%;\r\n  }\r\n`;\r\n\r\nconst Title = styled.h3`\r\n  font-size: 32px;\r\n  margin-bottom: 10px;\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst EnTitle = styled.h2`\r\n  font-size: 25px;\r\n`;\r\n\r\nconst ItemContainer = styled.div`\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst Item = styled.span``;\r\n\r\nconst Divider = styled.span`\r\n  margin: 0 10px;\r\n`;\r\n\r\nconst Overview = styled.p`\r\n  font-size: 13px;\r\n  opacity: 0.6;\r\n  margin-top:20px;\r\n  line-height:20px;\r\n  text-indent: 5px;\r\n`;\r\n\r\nconst DetailPresenter = ({ result, error, loading }) =>\r\n  loading ? (\r\n    <Loader />\r\n  ) : (\r\n    <Container>\r\n      <Backdrop\r\n        bgImage={\r\n          result.backdrop_path &&\r\n          `https://image.tmdb.org/t/p/original${result.backdrop_path}`\r\n        }\r\n      ></Backdrop>\r\n      <Content>\r\n        <Cover\r\n          src={\r\n            result.poster_path\r\n              ? `https://image.tmdb.org/t/p/w500${result.poster_path}`\r\n              : require(\"../../assets/noimage.jpg\").default\r\n          }\r\n        ></Cover>\r\n        <Data>\r\n          <Title>{result.title ? result.title : result.name}</Title>\r\n          <EnTitle>\r\n            {result.original_title\r\n              ? result.original_title !== result.title\r\n                ? result.original_title\r\n                : \"\"\r\n              : result.original_name !== result.name\r\n              ? result.original_name\r\n              : \"\"}\r\n          </EnTitle>\r\n          <ItemContainer>\r\n            <Item>\r\n              {result.release_date\r\n                ? result.release_date.substr(0, 4)\r\n                : result.first_air_date.substr(0, 4)}{\" \"}\r\n            </Item>\r\n            <Divider>⨀</Divider>\r\n            <Item>{result.runtime || result.episode_run_time} min</Item>\r\n            <Divider>⨀</Divider>\r\n            <Item>\r\n              {result.genres &&\r\n                result.genres.map((genre, index) =>\r\n                  index === result.genres.length - 1\r\n                    ? genre.name\r\n                    : `${genre.name}/`\r\n                )}\r\n            </Item>\r\n            <Overview>{result.overview}</Overview>\r\n          </ItemContainer>\r\n        </Data>\r\n      </Content>\r\n    </Container>\r\n  );\r\n\r\nDetailPresenter.propTypes = {\r\n  result: propTypes.object,\r\n  error: propTypes.string,\r\n  loading: propTypes.bool.isRequired,\r\n};\r\n\r\nexport default DetailPresenter;\r\n","import DetailContainer from \"./DetailContainer\";\r\n\r\nexport default DetailContainer;","import React from \"react\";\r\nimport DetailPresenter from \"./DetailPresenter\";\r\nimport { movieApi, tvApi } from \"../../api\";\r\n\r\nclass DetailContainer extends React.Component {\r\n  state = {\r\n    result: null,\r\n    error: null,\r\n    loading: true,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const {\r\n      match: {\r\n        params: { id },\r\n      },\r\n      history: { push }, //push는 해당 url로 보내는 메소드다. 자바스크립트는 메소드도 프로퍼티로 설정 가능하다는점 기억.\r\n      location: { pathname },\r\n    } = this.props;\r\n    //const parseID = parseInt(id);\r\n    //parseInt는 입력된 내용을 숫자만 남긴다. (parsing 개념). 문자만 있거나 문자가 앞에 있다면 NaN을 반환. 숫자 뒤에 문자가 있다면 숫자를 반환.\r\n    //Number()와도 비슷하지만 약간 다르다. Number는 정말 숫자만 있을경우 숫자를 반환. 문자가 조금이라도 있으면 NaN 반환.\r\n\r\n    this.isMovie = pathname.includes(\"/movie\"); //this를 붙여 전역변수처럼 쓰이도록 한다.\r\n    //이 isMovie는 업데이트하여 렌더링을 다시 할 일이 없기 때문에 이렇게 쓸수 있다.\r\n    //물론 isMovie를 state에 넣는 방식도 가능하다. 강의 참조.\r\n\r\n    const parsedID = Number(id); //난 이게 더 맞는거 같아서 이거 쓰련다.\r\n    if (isNaN(parsedID)) {\r\n      return push(\"/\");\r\n       //여기 retrun을 넣어줘야 함수가 그냥 종료하게 된다. 안그러면 뒤쪽 함수가 계속 실행되므로.\r\n    }\r\n\r\n    let result = null;\r\n    try {\r\n      if (this.isMovie) {\r\n      ({data:result} = await movieApi.movieDetail(parsedID)) //뭐지... 이게 되네?? ()는 const=와 같다...?\r\n      //result = request.data;\r\n      } else {\r\n        const request = await tvApi.showDetail(parsedID);\r\n        result = request.data;\r\n      }\r\n    } catch {\r\n      this.setState({ error: \"Can't find anything\" });\r\n    } finally {\r\n      this.setState({ loading: false, result });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { result, error, loading } = this.state;\r\n    return <DetailPresenter result={result} error={error} loading={loading} />;\r\n  }\r\n}\r\n\r\nexport default DetailContainer;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Redirect, Switch } from \"react-router-dom\";\r\nimport Home from \"../Routes/Home\"\r\nimport Search from \"../Routes/Search\"\r\nimport TV from \"../Routes/TV\"\r\nimport Header from \"./Header\"\r\nimport Detail from \"../Routes/Detail\"\r\n\r\nfunction RenderRouter() {\r\n    return <Router>\r\n        <Header /> {/**Link는 Router안에서만 동작한다. */}\r\n        <Switch>\r\n        <Route path=\"/wooflix\" exact component ={Home} />\r\n        <Route path=\"/wooflix/TV\" component ={TV} />\r\n        {/* <Route path=\"TV/Popular\" component = {()=> <h1>Popular</h1>} /> */}\r\n        <Route path=\"/wooflix/Search\" component ={Search} />\r\n        <Route path=\"/wooflix/movie/:id\" component = {Detail} />  {/*:id에 주의하자. */ }\r\n        <Route path=\"/wooflix/show/:id\" component = {Detail} />  {/*:id에 주의하자. console.log를 찍어보면 route가 :id를 props의 match :{params}에 넣어 전달함을 알수 있다.*/ }\r\n        <Redirect from=\"*\" to=\"/wooflix\" />   {/* 일치하는 route가 없다면 /로 보내라(redirect) 라는 뜻 */}\r\n        </Switch>\r\n    </Router>\r\n} \r\n\r\nexport default RenderRouter;","//styled-components를 사용한 방법은 global한 style부여가 힘들다.\r\n//그래서 add styled-reset을 설치한뒤 (npm add styled-reset)\r\n//GlobalStyles.js 파일을 만든다.\r\n\r\nimport { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\nconst globalStyles = createGlobalStyle`\r\n    ${reset};\r\n    a{\r\n        text-decoration: none;\r\n        color: inherit;\r\n    }\r\n    *{\r\n        box-sizing:border-box;\r\n    }\r\n    body{\r\n        font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n        font-size: 12px;\r\n        background-color:rgba(20,20,20,1);\r\n        color:white;\r\n        padding-top:50px;\r\n    }\r\n\r\n`;\r\n\r\nexport default globalStyles;","import Router from \"./Route\"\nimport GlobalStyles from \"./GlobalStyles\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router />\n      <GlobalStyles />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n   </React.StrictMode>,\n  document.getElementById('root')\n  \n);\n\n\n"],"sourceRoot":""}