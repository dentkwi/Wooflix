{"version":3,"sources":["assets/noimagetrans.png","assets/noimageblack.png","assets/noimagemini.png","assets/noimage.jpg","api.js","Components/Loader.js","Components/Section.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Components/Header.js","Routes/Detail/Tabs/DetailProduction.js","Routes/Detail/Tabs/DetailSeasons.js","Components/MovieLoader.js","Routes/Detail/Tabs/DetailVideos.js","Routes/Detail/Tabs/DetailCollection.js","Routes/Detail/DetailRoute.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Route.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["api","axios","create","baseURL","params","api_key","language","movieApi","get","id","append_to_response","term","query","tvApi","apigetCollection","Container","styled","div","Loader","role","aria-label","Title","span","Grid","Section","title","children","Text","props","color","Message","text","Mobile","isMobile","Image","bgUrl","Rating","ImageContainer","EnTitle","Year","Poster","imageUrl","en_title","rating","year","isMovie","to","require","default","HomePresenter","nowPlaying","upcoming","popular","error","loading","length","map","movie","original_title","poster_path","vote_average","release_date","substring","HomeContainer","state","a","data","results","this","setState","React","Component","Form","form","Input","input","SearchPresenter","withRouter","movieResults","tvResults","handleSubmit","searchTerm","updateTerm","lastTerm","isenterkey","onSubmit","placeholder","value","onChange","onKeyUp","show","name","original_name","SearchContainer","event","preventDefault","searchbyTerm","key","target","TVPresenter","topRated","airingToday","first_air_date","TVContainer","SHeader","header","List","ul","Item","li","current","SLink","Link","pathname","location","ItemContainer","PosterContainer","img","Name","DetailProduction","useState","setLoading","production_companies","production_countries","useEffect","company","src","logo_path","Airing","DetailSeasons","seasons","season","air_date","substr","ContainerForRatio","MovieLoader","NaviBar","NaviButton","button","DotContainer","Dots","IframeContainer","Iframe","iframe","DetailVideos","index","setIndex","dots","setDots","videos","console","log","makeingdots","i","push","className","frameBorder","allow","allowFullScreen","onClick","dot","DetailCollection","result","setResult","collection","belongs_to_collection","movieresult","getCollection","parts","TabContainer","Tabs","TabContainer2","Tabs2","DetailRoute","url","match","imdb_id","homepage","selected","changeselected","path","exact","render","rel","href","Backdrop","bgImage","Cover","Content","Data","h3","h2","Divider","Overview","p","ContainerForContents","DetailPresenter","backdrop_path","runtime","episode_run_time","genres","genre","overview","DetailContainer","history","includes","parsedID","Number","isNaN","request","RenderRouter","component","Home","TV","Search","Detail","from","globalStyles","createGlobalStyle","reset","App","Route","GlobalStyles","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.270b431e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/noimagetrans.0da1c901.png\";","export default __webpack_public_path__ + \"static/media/noimageblack.8b220d79.png\";","export default __webpack_public_path__ + \"static/media/noimagemini.97d6af55.png\";","export default __webpack_public_path__ + \"static/media/noimage.7a6d492e.jpg\";","import axios from \"axios\";\r\n\r\n//axios란 http비동기 통신 라이브러리로 api 데이터를 요청하는데 도움을 주는\r\n//라이브러리 입니다.\r\n//아래 코드는 axios 환경설정을 통해 기초 정보를 입력하여 api객체를 생성하는 역할을 한다.\r\nconst api = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3/\", //api 요청 주소의 동일한 기초 url주소를 입력해줍니다.\r\n  params: {\r\n    api_key: \"0d8610c6e6d2fe61811da428334a29e0\",\r\n    language: \"ko-KR\",\r\n  },\r\n});\r\n\r\n// api.get(\"tv/popular\"); //앞에 /를 붙이지 않도록 주의하자. /를 붙이지 않아야 상대경로로 가져올수 있다.\r\n\r\n// movieApi와 tvApi 객체를 각각 만들어 axios를 통해 생성한 api 객체에서 property data를 가져와 입력해준다.\r\nexport const movieApi = {\r\n  nowPlaying: () => api.get(\"movie/now_playing\"), //객체의 프로퍼티에 함수를 넣을수도 있다. 이를 메소드라고 한다.\r\n  upcoming: () => api.get(\"movie/upcoming\"), // 이는 upcoming: function() {api.get(\"movie/upcoming\") }과 같은 의미를 가진다.\r\n  popular: () => api.get(\"movie/popular\"),\r\n  movieDetail: (id) =>\r\n    api.get(`movie/${id}`, {\r\n      params: {\r\n        append_to_response: \"videos\", //api에서 append_to_reponse를 지원해야... id에 페러미터를 덧붙여서 해당 자료를 추가로 가져온다.\r\n      },\r\n    }),\r\n  search: (term) =>\r\n    api.get(\"search/movie\", {\r\n      params: {\r\n        query: (term), //사용자가 입력하는 query를 URI로 인코딩 해야한다. (documentation 참조!) 근데 이거 하면 한글검색 안되서 지워버림 ㅋㅋ\r\n      },\r\n    }),\r\n};\r\n\r\nexport const tvApi = {\r\n  topRated: () => api.get(\"tv/top_rated\"),\r\n  popular: () => api.get(\"tv/popular\"),\r\n  airingToday: () => api.get(\"tv/airing_today\"),\r\n  showDetail: (id) =>\r\n    api.get(`tv/${id}`, {\r\n      params: {\r\n        append_to_response: \"videos\",\r\n      },\r\n    }),\r\n  search: (term) =>\r\n    api.get(\"search/tv\", {\r\n      params: {\r\n        query: (term),\r\n      },\r\n    }),\r\n};\r\n\r\nexport const apigetCollection = (id) => api.get(`collection/${id}`)","import styled from \"styled-components\";\r\n\r\n// const ContainerForRatio = styled.div`\r\n//   height:inherit;\r\n//   display:flex;\r\n//   align-items: center;\r\n//   justify-content: center;\r\n//   display: flex;\r\n// `;\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  padding-top:20%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 28px;\r\n  /* @media screen and (max-width: 15cm){\r\n    aspect-ratio: 1.15/1;\r\n  } */\r\n  /* margin-top: 20px; */\r\n`;\r\n\r\nconst Loader = () => (\r\n    <Container>\r\n      <span role=\"img\" aria-label=\"Loading...\">\r\n        🕔\r\n      </span>\r\n    </Container>\r\n);\r\n\r\n//https://happycording.tistory.com/entry/HTML-Role-%EC%99%9C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%EB%A7%8C-%ED%95%98%EB%8A%94%EA%B0%80\r\n//span role에 관한 내용\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  :not(:last-child) {\r\n    margin-bottom: 50px;\r\n  }\r\n`;\r\n//위 표현에 유의하자. 일반 css라면 div:not:last-child{내용}식으로 나타냈겠지만..\r\n//여기서는 그렇게 할 수 없으므로 위같이 사용한다.\r\n//책의 일반 구조 선택자 파트를 다시한번 열어보자.\r\n\r\nconst Title = styled.span`\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst Grid = styled.div`\r\n  margin-top: 25px;\r\n  display:grid;\r\n  grid-template-columns:repeat(auto-fill,125px);\r\n  grid-gap:25px;\r\n  @media screen and (max-width: 15cm) {\r\n    justify-content:center;}\r\n`;\r\n\r\nconst Section = ({ title, children }) => (\r\n  //여기서 children의 개념이 중요하다. 이 section이란 react component는\r\n  //각 route presenter component에서 값을 받아 올텐데, childre은 <Section></Section>태그 사이에\r\n  //입력한 값을 받아오는 역할을 한다!\r\n  <Container>\r\n    <Title>{title}</Title>\r\n    <Grid>{children}</Grid>\r\n  </Container>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: propTypes.string.isRequired,\r\n  children: propTypes.oneOfType([\r\n    propTypes.node,\r\n    propTypes.arrayOf(propTypes.node), //구글 검색 복사\r\n  ]),\r\n};\r\n\r\nexport default Section;\r\n","import propTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  width: 100vw;\r\n  display: flex;\r\n  justify-content: center;\r\n  \r\n`;\r\n\r\nconst Text = styled.span`\r\n  color: ${(props) => props.color};\r\n  //이부분에 유의... props 부위엔 뭘 넣어도 상관이 없고, 해당 호출 객체의 color값에 접근할 수 있게 해준다!\r\n  //다른 값에도 접근할수 있을것으로 보인다. 화살표 함수와 styled component라 가능한 css문법인거 같다.\r\n`;\r\n\r\nconst Message = ({ text, color }) => (\r\n  <Container>\r\n    <Text color={color}>{text}</Text>\r\n  </Container>\r\n);\r\n\r\nMessage.propTypes = {\r\n  text: propTypes.string.isRequired,\r\n  color: propTypes.string.isRequired,\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { isMobile } from \"react-device-detect\";\r\n\r\nconst Mobile = isMobile;\r\n\r\nconst Container = styled.div`\r\n  font-size: 12px;\r\n`;\r\n\r\nconst Image = styled.div`\r\n  background-image: url(${(props) => props.bgUrl}); //이부분도 중요합니다!!\r\n  height: 180px;\r\n  background-size: contain; //요부분 다시 공부필요~\r\n  border-radius: 4px;\r\n  background-position: center center;\r\n  transition: opacity 0.1s linear; //transition에 :속성을 넣어서 한가지 속성만 조절할수 있다.\r\n`;\r\n\r\nconst Rating = styled.div`\r\n  position: absolute;\r\n  top: 160px;\r\n  right: 5px;\r\n  opacity: 0;\r\n  transition: opacity 0.1s linear;\r\n  &[color=\"true\"] {\r\n    opacity: 1;\r\n    z-index: 2;\r\n    background-color: rgba(20, 20, 20, 0.8);\r\n  }\r\n`;\r\n\r\nconst ImageContainer = styled.div`\r\n  //Image 요소에 접근하려면 Imagecontainer가 Image보다 더 뒤에 있어야 한다.\r\n  margin-bottom: 5px;\r\n  :hover {\r\n    ${Image} {\r\n      opacity: 0.3;\r\n    }\r\n    ${Rating} {\r\n      opacity: 1;\r\n    }\r\n  }\r\n  position: relative;\r\n`;\r\n\r\nconst Title = styled.div`\r\n  display: block;\r\n  margin-bottom: 5px;\r\n  font-weight: bold;\r\n  font-size: 13px;\r\n`;\r\n\r\nconst EnTitle = styled.div`\r\n  margin-bottom: 3px;\r\n`;\r\n\r\nconst Year = styled.div`\r\n  font-size: 10px;\r\n  color: rgba(255, 255, 255, 0.5);\r\n`;\r\n\r\nconst Poster = ({\r\n  id,\r\n  imageUrl,\r\n  en_title,\r\n  title,\r\n  rating,\r\n  year,\r\n  isMovie = false,\r\n  isMobile = Mobile,\r\n}) => (\r\n  <Link to={isMovie ? `/movie/${id}` : `/show/${id}`}>\r\n    <Container>\r\n      <ImageContainer>\r\n        <Image\r\n          bgUrl={\r\n            imageUrl\r\n              ? `https://image.tmdb.org/t/p/w300${imageUrl}`\r\n              : require(\"../assets/noimageblack.png\").default\r\n          }\r\n        ></Image>\r\n        <Rating color={`${isMobile}`}>\r\n          <span role=\"img\" aria-label=\"rating\">\r\n            ⭐\r\n          </span>\r\n          {rating}/10{\" \"}\r\n        </Rating>\r\n      </ImageContainer>\r\n      <Title>{title}</Title>\r\n      <EnTitle>{title === en_title ? \"\" : en_title}</EnTitle>\r\n      <Year>{year}</Year>\r\n    </Container>\r\n  </Link>\r\n);\r\n//require문법 공부해야함!\r\n//require로 이미지를 object의 형태로 가져오기때문에 .default로 해야 이미지에 접근됨.\r\n\r\n//콘솔의 네트워크를 살펴보면 components끼리 전달되는 내용을 확인할 수 있다.\r\n\r\nPoster.propTypes = {\r\n  id: propTypes.number.isRequired,\r\n  imageUrl: propTypes.string,\r\n  title: propTypes.string.isRequired,\r\n  rating: propTypes.number,\r\n  year: propTypes.string,\r\n  isMovie: propTypes.bool,\r\n};\r\n\r\nexport default Poster;\r\n","import propTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Section from \"../../Components/Section\";\r\nimport Message from \"../../Components/Message\";\r\nimport Poster from \"../../Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst HomePresenter = ({ nowPlaying, upcoming, popular, error, loading }) =>\r\n  loading ? (\r\n    <Loader /> //loading이 true인지 false인지 먼저 검사한다. 왜냐하면 loading이 끝나기 전에는 해당 값들이 들어와 있지 않기 때문이다.\r\n  ) : (\r\n    <Container>\r\n      {nowPlaying && nowPlaying.length > 0 && (\r\n        <Section title=\"Now playing\">\r\n          {nowPlaying.map((movie) => (\r\n            <Poster\r\n              key={movie.id}\r\n              id={movie.id}\r\n              en_title={movie.original_title}\r\n              title={movie.title}\r\n              imageUrl={movie.poster_path}\r\n              rating={movie.vote_average}\r\n              year={movie.release_date && movie.release_date.substring(0, 4)} //해당 내용이 있는지 확인후 substring을 적용시켜야 에러 가능성이 없어진다.\r\n              isMovie={true}\r\n            ></Poster>\r\n          ))}\r\n        </Section>\r\n      )}\r\n      {upcoming && upcoming.length > 0 && (\r\n        <Section title=\"Upcoming Movies\">\r\n          {upcoming.map((movie) => (\r\n            <Poster\r\n              key={movie.id}\r\n              id={movie.id}\r\n              en_title={movie.original_title}\r\n              title={movie.title}\r\n              imageUrl={movie.poster_path}\r\n              rating={movie.vote_average}\r\n              year={movie.release_date && movie.release_date.substring(0, 4)} //해당 내용이 있는지 확인후 substring을 적용시켜야 에러 가능성이 없어진다.\r\n              isMovie={true}\r\n            ></Poster>\r\n          ))}\r\n        </Section>\r\n      )}\r\n      {popular && popular.length > 0 && (\r\n        <Section title=\"Popular Movies\">\r\n          {popular.map((movie) => (\r\n            <Poster\r\n              key={movie.id}\r\n              id={movie.id}\r\n              en_title={movie.original_title}\r\n              title={movie.title}\r\n              imageUrl={movie.poster_path}\r\n              rating={movie.vote_average}\r\n              year={movie.release_date && movie.release_date.substring(0, 4)} //해당 내용이 있는지 확인후 substring을 적용시켜야 에러 가능성이 없어진다.\r\n              isMovie={true}\r\n            ></Poster>\r\n          ))}\r\n        </Section>\r\n      )}\r\n      {error && <Message text={error} color={\"#e74c3c\"} />}\r\n    </Container>\r\n  );\r\n//3중으로 체크한다. nowPlying이 있는지, 0보다 길이가 긴지, 제대로 렌더링 되었는지. 모두 true면 마지막 값을 return 한다.\r\n//<Section>aaaa</Section>에서 aaaa에 해당하는 부분이 Section component의 childre으로 전달된다.\r\n\r\nHomePresenter.propTypes = {\r\n  nowPlaying: propTypes.array,\r\n  upcoming: propTypes.array,\r\n  popular: propTypes.array,\r\n  error: propTypes.string,\r\n  loading: propTypes.bool.isRequired,\r\n};\r\n\r\nexport default HomePresenter;\r\n","import HomeContainer from\"./HomeContainer\";\r\n\r\nexport default HomeContainer;","import React from \"react\";\r\nimport { movieApi } from \"../../api\";\r\nimport HomePresenter from \"./HomePresenter\";\r\n\r\n\r\nclass HomeContainer extends React.Component {\r\n  //원래는 생성자를 통해 (constructor() {super(props); this.state ={}...) state초기값 property를\r\n  //설정 하여야 하나, 최신 javascript의 class field시스템 덕분에 아래처럼 바로 state ={}어쩌구로 \r\n  //생성자 없이 사용이 가능하다.\r\n  \r\n  state = {\r\n    nowPlaying: null,\r\n    upcoming: null,\r\n    popular: null,\r\n    error: null, //여기랑\r\n    loading: true, //여기 잘 모르겠다.. state 공부를 하면 알게되나!\r\n  }; \r\n\r\n\r\n\r\n  //두가지 옵션이 있다. 하나의 함수로 모든 api를 처리하든지,\r\n  //아니면 nowPlaying, upcoming, popular 다른 함수로 각각 처리하든지.\r\n  async componentDidMount() {\r\n    //함수내에서 비동기 함수를 시행하려면 해당 함수에도 async가 붙어야 한다.\r\n    try {\r\n      const {\r\n        data: { results: nowPlaying }, //data의 results를 nowPlaying이라는 이름으로 가져온다.\r\n      } = await movieApi.nowPlaying(); //객체내 nowplaying 메소드가 완료될때까지 기다린다.\r\n\r\n      const {\r\n        data: { results: upcoming },\r\n      } = await movieApi.upcoming();\r\n\r\n      const {\r\n        data: { results: popular },\r\n      } = await movieApi.popular();\r\n\r\n      this.setState({\r\n        nowPlaying: nowPlaying,\r\n        upcoming: upcoming,\r\n        popular: popular,\r\n      }); //이렇게 쓰는게 정석이나 자바스크립트에서는 이름이 같을경우 짧게 뒤쪽을 생략하여 \r\n      //nowPlaying, upcoming, popular만 적어줘도 관계없다.\r\n\r\n\r\n    } catch {\r\n      this.setState({\r\n        error: \"Cant't find movie information\",\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  //위함수들로 모든 api데이터를 처리한다음...\r\n\r\n  //이 아래쪽에서 Homepresenter로 보내서 보여주는 처리를 하게 된다!\r\n  //이것이 container와 presenter의 분리이다.\r\n  render() {\r\n    const { nowPlaying, upcoming, popular, error, loading } = this.state;\r\n    return (\r\n      <HomePresenter\r\n        nowPlaying={nowPlaying}\r\n        upcoming={upcoming}\r\n        popular={popular}\r\n        error={error}\r\n        loading={loading}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomeContainer;\r\n","import propTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Section from \"../../Components/Section\";\r\nimport Message from \"../../Components/Message\";\r\nimport Poster from \"../../Components/Poster\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nconst Container = styled.div`\r\n  padding: 0 20px;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  margin-bottom: 50px;\r\n  width: 100%;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  all: unset; //모든 속성을 초기화.\r\n  width: 100%;\r\n  font-size: 28px;\r\n`;\r\n\r\nconst SearchPresenter = withRouter(\r\n  ({\r\n    movieResults,\r\n    tvResults,\r\n    error,\r\n    loading,\r\n    handleSubmit,\r\n    searchTerm,\r\n    updateTerm,\r\n    lastTerm,\r\n    isenterkey,\r\n  }) => {\r\n    return (\r\n      <Container>\r\n        <Form onSubmit={handleSubmit}>\r\n          <Input\r\n            placeholder=\"Search Movies or TV-Shows....\"\r\n            value={searchTerm}\r\n            onChange={updateTerm}\r\n            onKeyUp={isenterkey}\r\n          ></Input>\r\n        </Form>\r\n        {loading ? (\r\n          <Loader />\r\n        ) : (\r\n          <>\r\n            {movieResults && movieResults.length > 0 && (\r\n              <Section title=\"Movie Results\">\r\n                {movieResults.map((movie) => (\r\n                  <Poster\r\n                    key={movie.id}\r\n                    id={movie.id}\r\n                    en_title={movie.original_title}\r\n                    title={movie.title}\r\n                    imageUrl={movie.poster_path}\r\n                    rating={movie.vote_average}\r\n                    year={\r\n                      movie.release_date && movie.release_date.substring(0, 4)\r\n                    } //해당 내용이 있는지 확인후 substring을 적용시켜야 에러 가능성이 없어진다.\r\n                    isMovie={true}\r\n                  ></Poster>\r\n                ))}\r\n              </Section>\r\n            )}\r\n            {tvResults && tvResults.length > 0 && (\r\n              <Section title=\"TV Show Results\">\r\n                {tvResults.map((show) => (\r\n                  <Poster\r\n                    key={show.id}\r\n                    id={show.id}\r\n                    title={show.name}\r\n                    en_title={show.original_name}\r\n                    imageUrl={show.poster_path}\r\n                    rating={show.vote_average}\r\n                    year={\r\n                      show.release_date && show.release_date.substring(0, 4)\r\n                    } //해당 내용이 있는지 확인후 substring을 적용시켜야 에러 가능성이 없어진다.\r\n                  ></Poster>\r\n                ))}\r\n              </Section>\r\n            )}\r\n          </>\r\n        )}\r\n        {error && <Message color={\"#e74c3c\"} text={error} />}\r\n        {tvResults &&\r\n          movieResults &&\r\n          tvResults.length === 0 &&\r\n          movieResults.length === 0 && (\r\n            <Message\r\n              color={\"#95a5a6\"}\r\n              text={`Nothing found for: ${lastTerm}`}\r\n            />\r\n          )}\r\n      </Container>\r\n    );\r\n  }\r\n);\r\n//input form에 value만 넣을 경우 해당 input은 read-only가 되어버린다.\r\n//onChange를 넣어줌으로써 이를 막을수 있다.\r\n\r\nSearchPresenter.propTypes = {\r\n  movieResults: propTypes.array,\r\n  tvResults: propTypes.array,\r\n  searchTerm: propTypes.string,\r\n  error: propTypes.string,\r\n  loading: propTypes.bool.isRequired,\r\n  handleSubmit: propTypes.func.isRequired,\r\n  updateTerm: propTypes.func.isRequired,\r\n  isenterkey: propTypes.func.isRequired,\r\n};\r\n\r\nexport default SearchPresenter;\r\n","import SearchContainer from \"./SearchContainer\";\r\n\r\nexport default SearchContainer;","import React from \"react\";\r\nimport { movieApi, tvApi } from \"../../api\";\r\nimport SearchPresenter from \"./SearchPresenter\";\r\n\r\nclass SearchContainer extends React.Component {\r\n  state = {\r\n    movieResults: null,\r\n    tvResults: null,\r\n    searchTerm: \"\",\r\n    error: null,\r\n    loading: false, //사용자가 검색하기를 기다렸다 로딩하기 위함.\r\n    lastTerm: \"\",\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault(); //원래 enter를 치면 search내용이 submit되나, 이때 화면을 refresh한다. 이를 막기위해 넣는다.\r\n    const { searchTerm } = this.state;\r\n    if (searchTerm !== \"\") {\r\n      this.searchbyTerm();\r\n    }\r\n  };\r\n\r\n  isenterkey = async (event) => {\r\n    if (event.key === \"Enter\")\r\n      await this.setState({ lastTerm: event.target.value });\r\n  };\r\n\r\n  updateTerm = (event) => {\r\n    //이 event를 console.log 해서 어떠한 정보가 전달되는지 확인하고 그에 맞춰 로직을 설계한다.\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    this.setState({ searchTerm: value }); //이부분은 그냥 공식처럼 외워주는게 좋겠다..\r\n  };\r\n\r\n  searchbyTerm = async () => {\r\n    const { searchTerm } = this.state;\r\n    try {\r\n      this.setState({ loading: true });\r\n      const {\r\n        data: { results: movieResults },\r\n      } = await movieApi.search(searchTerm);\r\n      const {\r\n        data: { results: tvResults },\r\n      } = await tvApi.search(searchTerm);\r\n      this.setState({ movieResults, tvResults });\r\n    } catch {\r\n      this.setState({ error: \"Can't find results.\" });\r\n    } finally {\r\n      this.setState({ loading: false });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      movieResults,\r\n      tvResults,\r\n      searchTerm,\r\n      error,\r\n      loading,\r\n      lastTerm,\r\n    } = this.state;\r\n    return (\r\n      <SearchPresenter\r\n        error={error}\r\n        loading={loading}\r\n        movieResults={movieResults}\r\n        tvResults={tvResults}\r\n        searchTerm={searchTerm}\r\n        lastTerm={lastTerm}\r\n        handleSubmit={this.handleSubmit}\r\n        updateTerm={this.updateTerm}\r\n        isenterkey={this.isenterkey}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchContainer;\r\n","import propTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Message from \"../../Components/Message\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Section from \"../../Components/Section\";\r\nimport Poster from \"../../Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n  padding: 0 20px;\r\n`;\r\n\r\nconst TVPresenter = ({ topRated, popular, airingToday, error, loading }) =>\r\n  loading ? (\r\n    <Loader />\r\n  ) : (\r\n    <Container>\r\n      {topRated && topRated.length > 0 && (\r\n        <Section title=\"Top Rated Shows\">\r\n          {topRated.map((show) => (\r\n            <Poster\r\n              key={show.id}\r\n              id={show.id}\r\n              title={show.name}\r\n              en_title={show.original_name}\r\n              imageUrl={show.poster_path}\r\n              rating={show.vote_average}\r\n              year={show.first_air_date && show.first_air_date.substring(0, 4)} //해당 내용이 있는지 확인후 substring을 적용시켜야 에러 가능성이 없어진다.\r\n            ></Poster>\r\n          ))}\r\n        </Section>\r\n      )}\r\n\r\n      {popular && popular.length > 0 && (\r\n        <Section title=\"Popular TV Shows\">\r\n          {popular.map((show) => (\r\n            <Poster\r\n              key={show.id}\r\n              id={show.id}\r\n              title={show.name}\r\n              en_title={show.original_name}\r\n              imageUrl={show.poster_path}\r\n              rating={show.vote_average}\r\n              year={show.first_air_date && show.first_air_date.substring(0, 4)} //해당 내용이 있는지 확인후 substring을 적용시켜야 에러 가능성이 없어진다.\r\n            ></Poster>\r\n          ))}\r\n        </Section>\r\n      )}\r\n\r\n      {airingToday && airingToday.length > 0 && (\r\n        <Section title=\"Airing Today\">\r\n          {airingToday.map((show) => (\r\n            <Poster\r\n              key={show.id}\r\n              id={show.id}\r\n              title={show.name}\r\n              en_title={show.original_name}\r\n              imageUrl={show.poster_path}\r\n              rating={show.vote_average}\r\n              year={show.first_air_date && show.first_air_date.substring(0, 4)} //해당 내용이 있는지 확인후 substring을 적용시켜야 에러 가능성이 없어진다.\r\n            ></Poster>\r\n          ))}\r\n        </Section>\r\n      )}\r\n\r\n      {error && <Message text={error} color={\"#e74c3c\"} />}\r\n    </Container>\r\n  );\r\n//위 삼중평가 식을 잘 살펴보자. short circuit evaluation/ 단축평가라 불리는 방식이다.\r\n//앞에서부터 순서대로 검사하여 모두 true이면 마지막 값을 내보내고 중간에 하나라도 false면 중간에서 검사를\r\n//중지하고 false값을 내보낸다. ||를 사용했을 경우에는 하나라도 true가 나오면 바로 그 값을 반환한다.\r\n\r\nTVPresenter.propTypes = {\r\n  topRated: propTypes.array,\r\n  popular: propTypes.array,\r\n  airingToday: propTypes.array,\r\n  error: propTypes.string,\r\n  loading: propTypes.bool.isRequired,\r\n};\r\n\r\nexport default TVPresenter;\r\n","import TVContainer from \"./TVContainer\";\r\n\r\nexport default TVContainer;","import React from \"react\";\r\nimport { tvApi } from \"../../api\";\r\nimport TVPresenter from \"./TVPresenter\";\r\n\r\nclass TVContainer extends React.Component {\r\n  state = {\r\n    topRated: null,\r\n    popular: null,\r\n    airingToday: null,\r\n    error: null,\r\n    loading: true,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const {\r\n        data: { results: topRated },\r\n      } = await tvApi.topRated();\r\n\r\n      const {\r\n        data: { results: popular },\r\n      } = await tvApi.popular();\r\n\r\n      const {\r\n        data: { results: airingToday },\r\n      } = await tvApi.airingToday();\r\n\r\n      this.setState({topRated, popular, airingToday});\r\n    } catch {\r\n      this.setState({\r\n        error: \"Cant't find TV information\",\r\n      });\r\n    } finally {\r\n      this.setState({loading: false})\r\n    }\r\n  }\r\n\r\n  render(){ \r\n    const { topRated, popular, airingToday, error, loading } = this.state;\r\n    return (\r\n      <TVPresenter\r\n        topRated={topRated}\r\n        popular={popular}\r\n        airingToday={airingToday}\r\n        error={error}\r\n        loading={loading}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default TVContainer;\r\n","import styled from \"styled-components\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\nconst SHeader = styled.header`\r\n  color: white;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0px 10px;\r\n  background-color: rgba(20, 20, 20, 0.8);\r\n  box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\r\n  z-index: 90;\r\n`;\r\n\r\n//npa add styled-components 이후 아래와 같이 스타일을 입력할 수 있게된다.\r\nconst List = styled.ul`\r\n  display: flex;\r\n`;\r\n\r\nconst Item = styled.li`\r\n  height: 50px;\r\n  width: 50px;\r\n  text-align: center;\r\n  border-bottom: 5px solid\r\n    ${(props) => (props.current ? \"#3498db\" : \"transparent\")};\r\n  transition: border-bottom 0.5s ease-in-out;\r\n`;\r\n\r\nconst SLink = styled(Link)`\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n//react router dom의 Link를 사용하는 경우에는 위와 같이 스타일을 줄 수 있다.\r\n\r\nfunction Header({ location: { pathname } }) {\r\n  return (\r\n    <SHeader>\r\n      <List>\r\n        <Item current={pathname === \"/\"}>\r\n          <SLink to=\"/\">Movie</SLink>\r\n        </Item>\r\n        <Item current={pathname === \"/TV\"}>\r\n          <SLink to=\"/TV\">TV</SLink>\r\n        </Item>\r\n        <Item current={pathname === \"/Search\"}>\r\n          <SLink to=\"/Search\">Search</SLink>\r\n        </Item>\r\n      </List>\r\n    </SHeader>\r\n  );\r\n}\r\n\r\nexport default withRouter(Header);\r\n\r\n//withRouter는 조금더 공부 필요.. withRouter란 component가 해당 component를\r\n//wrap하여 전달하는데 이때 각종 prop들이 전달되며 이 prop들을 활용할 수 있게된다.\r\n\r\n//header.js는 react router에서 정보를 받지 않는다. route.js를 살펴보면 route에 속해있지 않기 때문이다.\r\n//그래서 header가 route 정보를 받으려면 withRouter로 decoration해줄 필요가 생기는것이다\r\n//route들, 예를 들면 TV, movie, detail등은 withRouter의 도움없이 props 정보들을 얻어올수 있다\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport styled from \"styled-components\";\r\nimport Loader from \"../../../Components/Loader\";\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(22%, 1fr));\r\n  /* grid-auto-flow: row dense; */\r\n  gap: 15px;\r\n`;\r\nconst ItemContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-end;\r\n\r\n  background-color: rgba(150, 150, 150, 0.25);\r\n  border-radius: 10px;\r\n  padding: 10px;\r\n  padding-bottom: 10px;\r\n`;\r\n\r\nconst PosterContainer = styled.div`\r\n  /* aspect-ratio: 1/1.2; */\r\n  height: 100%;\r\n  justify-content: center;\r\n  align-items: center;\r\n  display: flex;\r\n  object-fit: contain;\r\n`;\r\n\r\nconst Poster = styled.img`\r\n  min-width: 60px;\r\n  width: 100%;\r\n  object-fit: contain;\r\n`;\r\n\r\nconst Name = styled.div`\r\n  font-size: 10px;\r\n  opacity: 0.7;\r\n  margin-top: 10px;\r\n`;\r\n\r\nconst DetailProduction = withRouter((props) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const { production_companies, production_countries } = props.props;\r\n\r\n  useEffect(() => {\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  return loading ? (\r\n    <Loader />\r\n  ) : production_companies.length === 0 ? (\r\n    \"No production company data available...\"\r\n  ) : (\r\n    <Container>\r\n      {production_companies.map((company) => (\r\n        <ItemContainer>\r\n          <PosterContainer>\r\n            <Poster\r\n              src={\r\n                company.logo_path\r\n                  ? `https://image.tmdb.org/t/p/w300${company.logo_path}`\r\n                  : require(\"../../../assets/noimagemini.png\").default\r\n              }\r\n            />\r\n          </PosterContainer>\r\n          <Name>{company.name}</Name>\r\n        </ItemContainer>\r\n      ))}\r\n    </Container>\r\n  );\r\n});\r\n\r\nexport default DetailProduction;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport styled from \"styled-components\";\r\nimport Loader from \"../../../Components/Loader\";\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(22%, 1fr));\r\n  /* grid-auto-flow: row dense; */\r\n  gap: 15px;\r\n`;\r\nconst ItemContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-end;\r\n\r\n  background-color: rgba(150, 150, 150, 0.25);\r\n  border-radius: 10px;\r\n  padding: 10px;\r\n  padding-bottom: 10px;\r\n`;\r\n\r\nconst PosterContainer = styled.div`\r\n  /* aspect-ratio: 1/1.2; */\r\n  height: 100%;\r\n  justify-content: center;\r\n  align-items: center;\r\n  display: flex;\r\n  object-fit: contain;\r\n`;\r\n\r\nconst Poster = styled.img`\r\n  min-width: 60px;\r\n  width: 100%;\r\n  object-fit: contain;\r\n`;\r\n\r\nconst Name = styled.div`\r\n  font-size: 10px;\r\n  opacity: 0.7;\r\n  margin-top: 10px;\r\n`;\r\n\r\nconst Airing = styled.div`\r\n font-size: 10px;\r\n opacity: 0.7;\r\n margin-top:2px;\r\n`\r\n\r\nconst DetailSeasons = withRouter((props) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const { seasons } = props.props;\r\n\r\n  useEffect(() => {\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  return loading ? (\r\n    <Loader />\r\n  ) : !seasons || seasons.length === 0 ? (\r\n    \"No season data available...\"\r\n  ) : (\r\n    <Container>\r\n      {seasons.map((season) => (\r\n        <ItemContainer>\r\n          <PosterContainer>\r\n            <Poster\r\n              src={\r\n                season.poster_path\r\n                  ? `https://image.tmdb.org/t/p/w300${season.poster_path}`\r\n                  : require(\"../../../assets/noimagetrans.png\").default\r\n              }\r\n            />\r\n          </PosterContainer>\r\n          <Name>{season.name}</Name>\r\n          <Airing>{season.air_date && season.air_date.substr(0,4)}</Airing>\r\n        </ItemContainer>\r\n      ))}\r\n    </Container>\r\n  );\r\n});\r\n\r\nexport default DetailSeasons;\r\n","import styled from \"styled-components\";\r\n\r\nconst ContainerForRatio = styled.div`\r\n  width: 100%;\r\n  padding-top: 59.7%;\r\n  position: relative;\r\n  /* @media screen and (max-height: 15cm) {\r\n    padding-top: 0px;\r\n    height: 72vh; */\r\n\r\n  /* 이것 역시 ratio를 위한 container. padding-top을 변경하여 ratio를 맞출수 있다. */\r\n`;\r\nconst Container = styled.div`\r\n  position: absolute;\r\n  display: flex;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  /* aspect-ratio: 1.27/1; */\r\n  /* display: flex; */\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 28px;\r\n  /* @media screen and (max-width: 15cm){\r\n    aspect-ratio: 1.15/1;\r\n  } */\r\n  /* margin-top: 20px; */\r\n`;\r\n\r\nconst MovieLoader = () => (\r\n  <ContainerForRatio>\r\n    <Container>\r\n      <span role=\"img\" aria-label=\"Loading...\">\r\n        🕔\r\n      </span>\r\n    </Container>\r\n  </ContainerForRatio>\r\n);\r\n\r\n//https://happycording.tistory.com/entry/HTML-Role-%EC%99%9C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%EB%A7%8C-%ED%95%98%EB%8A%94%EA%B0%80\r\n//span role에 관한 내용\r\n\r\nexport default MovieLoader;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport styled from \"styled-components\";\r\nimport MovieLoader from \"../../../Components/MovieLoader\";\r\n\r\nconst NaviBar = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  /* margin: 10px 0px; */\r\n  margin-bottom: 0px;\r\n`;\r\n\r\nconst NaviButton = styled.button`\r\n  background: unset;\r\n  color: white;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst DotContainer = styled.div`\r\n  justify-content: center;\r\n  align-items: center;\r\n  display: flex;\r\n`;\r\n\r\nconst Dots = styled.span`\r\n  font-size: 15px;\r\n  line-height: 20px;\r\n  margin: 5px;\r\n`;\r\n\r\nconst IframeContainer = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  padding-top: 56.25%; /* 4:3 Aspect Ratio */\r\n  /* 위 컨테이너를 이용한 코드는 aspect-ratio가 통하지 않는 브라우저가 아직 많기 때문에 이를 달성하게 해주는 일종의 핵이다. */\r\n  /*https://web.dev/aspect-ratio/ 참고.  */\r\n`;\r\n\r\nconst Iframe = styled.iframe`\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  /* width: 100%; */\r\n  /* aspect-ratio: 1.68/1; */\r\n  /* margin-bottom: 50px; */\r\n`;\r\n\r\nconst DetailVideos = withRouter((props) => {\r\n  const [index, setIndex] = useState(0);\r\n  const [error, setError] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  const [dots, setDots] = useState([]);\r\n\r\n  const {\r\n    props: { videos },\r\n  } = props;\r\n  const indexUp = () => {\r\n    if (videos.length === 1) return;\r\n    else if (videos.length - 1 === index) setIndex(0);\r\n    else setIndex(index + 1);\r\n    setLoading(true);\r\n  };\r\n\r\n  const indexDown = () => {\r\n    if (videos.length === 1) return;\r\n    if (index === 0) setIndex(videos.length - 1);\r\n    else setIndex(index - 1);\r\n    setLoading(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(props);\r\n    const makeingdots = [];\r\n    for (let i = 0; i < videos.length; i++) {\r\n      if (i === index) makeingdots.push(\"◆\");\r\n      else makeingdots.push(\"○\");\r\n      setDots(makeingdots);\r\n    }\r\n  }, [index]);\r\n\r\n  useEffect(() => {\r\n    setLoading(false);\r\n  }, [index]);\r\n\r\n  return videos.length === 0 ? (\r\n    \"No videos available\"\r\n  ) : loading ? (\r\n    <MovieLoader />\r\n  ) : (\r\n    <>\r\n      <IframeContainer>\r\n        <Iframe\r\n          className={\"Video\"}\r\n          src={`https://www.youtube.com/embed/${videos[index].key}`}\r\n          title=\"YouTube video player\"\r\n          frameBorder=\"0\"\r\n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n          allowFullScreen\r\n        ></Iframe>\r\n      </IframeContainer>\r\n      <NaviBar>\r\n        <NaviButton key=\"left\" onClick={indexDown}>\r\n          ⫷\r\n        </NaviButton>\r\n        <DotContainer>\r\n          {dots.map((dot, index) => (\r\n            <Dots key={videos[index].key}> {dot} </Dots>\r\n          ))}\r\n        </DotContainer>\r\n        <NaviButton key=\"right\" onClick={indexUp}>\r\n          ⫸\r\n        </NaviButton>\r\n      </NaviBar>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default DetailVideos;\r\n","import { useEffect, useState } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { apigetCollection } from \"../../../api\";\r\nimport Loader from \"../../../Components/Loader\";\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(22%, 1fr));\r\n  /* grid-auto-flow: row dense; */\r\n  gap: 15px;\r\n`;\r\nconst ItemContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-end;\r\n\r\n  background-color: rgba(150, 150, 150, 0.25);\r\n  border-radius: 10px;\r\n  padding: 10px;\r\n  padding-bottom: 10px;\r\n`;\r\n\r\nconst PosterContainer = styled.div`\r\n  /* aspect-ratio: 1/1.2; */\r\n  height: 100%;\r\n  justify-content: center;\r\n  align-items: center;\r\n  display: flex;\r\n  object-fit: contain;\r\n`;\r\n\r\nconst Poster = styled.img`\r\n  min-width: 60px;\r\n  width: 100%;\r\n  object-fit: contain;\r\n`;\r\n\r\nconst Name = styled.div`\r\n  font-size: 10px;\r\n  opacity: 0.7;\r\n  margin-top: 10px;\r\n`;\r\n\r\nconst Airing = styled.div`\r\n  font-size: 10px;\r\n  opacity: 0.7;\r\n  margin-top: 2px;\r\n`;\r\n\r\nconst DetailCollection = withRouter((props) => {\r\n  const [result, setResult] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  const { belongs_to_collection: collection } = props.props;\r\n\r\n  useEffect(() => {\r\n   \r\n    \r\n    const getCollection = async () => {\r\n      const id = collection.id;\r\n      try {\r\n        const movieresult = await apigetCollection(id);\r\n        setResult(movieresult);\r\n      } catch (e) {\r\n        console.log(e);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    if(collection) getCollection();\r\n  }, []);\r\n\r\n  return !collection ? (\r\n    \"No collection available\"\r\n  ) : loading ? (\r\n    <Loader />\r\n  ) : (\r\n    <Container>\r\n      {result.data.parts.map((movie) => (\r\n        <Link to={`/movie/${movie.id}`}>\r\n          <ItemContainer>\r\n            <PosterContainer>\r\n              <Poster\r\n                src={\r\n                  movie.poster_path\r\n                    ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`\r\n                    : require(\"../../../assets/noimagetrans.png\").default\r\n                }\r\n              />\r\n            </PosterContainer>\r\n            <Name>{movie.title}</Name>\r\n            <Airing>\r\n              {movie.release_date && movie.release_date.substr(0, 4)}\r\n            </Airing>\r\n          </ItemContainer>\r\n        </Link>\r\n      ))}\r\n    </Container>\r\n  );\r\n});\r\n\r\nexport default DetailCollection;\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n  HashRouter as Router,\r\n  Link,\r\n  Route,\r\n  withRouter,\r\n  Switch,\r\n} from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport DetailProduction from \"./Tabs/DetailProduction\";\r\nimport DetailSeasons from \"./Tabs/DetailSeasons\";\r\nimport DetailVideos from \"./Tabs/DetailVideos\";\r\nimport DetailCollection from \"./Tabs/DetailCollection\";\r\n\r\nconst TabContainer = styled.ul`\r\n  display: flex;\r\n  float: left;\r\n  /* margin-top: 10px; */\r\n  height: 30px;\r\n  width: 200px;\r\n  margin-bottom: 5px;\r\n`;\r\n\r\nconst Tabs = styled.button`\r\n  all: unset;\r\n  width: 80px;\r\n  font-size: 12px;\r\n  text-align: center;\r\n  color: white;\r\n  text-shadow: 0.5px 0.5px 10px black;\r\n  height: 20px;\r\n  z-index: 100;\r\n  border: ${(props) => (props.color ? \"2px solid #F58E85\" : \"2px solid wheat\")};\r\n  background: ${(props) => (props.color ? \"rgb(250,65,32,0.5)\" : \"none\")};\r\n  box-shadow: ${(props) =>\r\n    props.color ? \"0px 0px 2px red\" : \"0px 0px 10px black\"};\r\n`;\r\n\r\n\r\nconst TabContainer2 = styled.ul`\r\n  display: grid;\r\n  /* margin-top: 10px; */\r\n  height: 30px;\r\n  /* width: 200px; */\r\n  margin-bottom: 5px;\r\n  margin-bottom: 20px;\r\n  grid-template-columns:50% 50%;\r\n`;\r\n\r\nconst Tabs2 = styled.button`\r\n  all: unset;\r\n  width: 100%;\r\n  color: white;\r\n  text-align: center;\r\n  border: 2px solid wheat;\r\n  z-index: 100;\r\n  height: 25px;\r\n  margin-top: 10px;\r\n  white-space: nowrap;\r\n`;\r\n\r\nconst SLink = styled(Link)`\r\n  margin-right: 10px;\r\n  z-index: 100;\r\n`;\r\n\r\nconst DetailRoute = withRouter((props) => {\r\n  const {\r\n    match: { url },\r\n    videos: { results: videos },\r\n    production_countries,\r\n    production_companies,\r\n    imdb_id,\r\n    seasons,\r\n    isMovie,\r\n    belongs_to_collection,\r\n    homepage,\r\n  } = props;\r\n\r\n  const [selected, changeselected] = useState();\r\n\r\n  useEffect(() => {}, [selected]);\r\n\r\n  return (\r\n    <>\r\n      <TabContainer>\r\n        <SLink to={`${url}/videos`}>\r\n          <Tabs onClick={() => changeselected(0)} color={selected === 0}>\r\n            Videos\r\n          </Tabs>\r\n        </SLink>\r\n        <SLink to={`${url}/production`}>\r\n          <Tabs onClick={() => changeselected(1)} color={selected === 1}>\r\n            Production\r\n          </Tabs>\r\n        </SLink>\r\n        {!isMovie && (\r\n          <SLink to={`${url}/seasons`}>\r\n            <Tabs onClick={() => changeselected(2)} color={selected === 2}>\r\n              Seasons\r\n            </Tabs>\r\n          </SLink>\r\n        )}\r\n        {isMovie && (\r\n          <SLink to={`${url}/collections`}>\r\n            <Tabs onClick={() => changeselected(3)} color={selected === 3}>\r\n              Collections\r\n            </Tabs>\r\n          </SLink>\r\n        )}\r\n      </TabContainer>\r\n      <Route path={\"/\"}>\r\n        <Switch>\r\n          <Route\r\n            path={`${url}/videos`}\r\n            exact\r\n            render={() => <DetailVideos props={{ videos: videos }} />}\r\n          />\r\n          {/* Route에 custom prop을 넘기는 방법! 참고하자.. 여기서 component에 render를 쓰면 조금더 성능 향상이 있다고 한다. 왜냐하면 컴포넌트의 prop이 바뀔때마다 재생성이 일어나기 때문이다!*/}\r\n          <Route\r\n            path={`${url}/production`}\r\n            render={() => (\r\n              <DetailProduction\r\n                props={{\r\n                  production_companies: production_companies,\r\n                  production_countries: production_countries,\r\n                }}\r\n              />\r\n            )}\r\n          />\r\n          <Route\r\n            path={`${url}/seasons`}\r\n            exact\r\n            render={() => <DetailSeasons props={{ seasons: seasons }} />}\r\n          />\r\n          <Route\r\n            exact\r\n            path={`${url}/collections`}\r\n            render={() => (\r\n              <DetailCollection\r\n                props={{\r\n                  belongs_to_collection: belongs_to_collection,\r\n                  ...props,\r\n                }}\r\n              />\r\n            )}\r\n          />\r\n        </Switch>\r\n      </Route>\r\n      <TabContainer2>\r\n        {imdb_id ? (\r\n          <a\r\n            rel={\"noreferrer\"}\r\n            href={`https://www.imdb.com/title/${imdb_id}`}\r\n            target={\"_blank\"}\r\n          >\r\n            <Tabs2>Link to IMDb</Tabs2>\r\n          </a>\r\n        ) : (\r\n          <Tabs2>No database in IMDb</Tabs2>\r\n        )}\r\n        {homepage ? (\r\n          <a rel={\"noreferrer\"} href={homepage} target={\"_blank\"}>\r\n            <Tabs2>Link to Homepage</Tabs2>\r\n          </a>\r\n        ) : (\r\n          <Tabs2>No Homepage data</Tabs2>\r\n        )}\r\n      </TabContainer2>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default DetailRoute;\r\n","import propTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport DetailRoute from \"./DetailRoute\";\r\n\r\nconst Container = styled.div`\r\n  /* height: 100vh; */\r\n  height: 100%; //calc을 사용하여 계산식을 넣을수 있다.. 와우!\r\n  width: 100%;\r\n  position: static;\r\n  padding: 40px;\r\n  @media screen and (max-width: 15cm) {\r\n    height: 100%;\r\n    position: static;\r\n  }\r\n  @media screen and (max-height: 15cm) {\r\n    height: 100%;\r\n    position: static;\r\n  }\r\n`;\r\n\r\nconst Backdrop = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-position: center center;\r\n  background-size: cover;\r\n  background-image: url(${(props) => props.bgImage});\r\n  filter: blur(3px);\r\n  opacity: 0.5;\r\n  z-index: 0;\r\n`;\r\n\r\nconst Cover = styled.img`\r\n  width: 30%;\r\n  height: auto;\r\n  object-fit: contain;\r\n  border-radius: 5px;\r\n  z-index: 1;\r\n  @media screen and (max-width: 15cm) {\r\n    width: 70%;\r\n    margin-bottom: 30px;\r\n  }\r\n`;\r\n\r\nconst Content = styled.div`\r\n  padding: 20px 10px;\r\n  border-radius: 10px;\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: 1;\r\n  align-items: center;\r\n  align-content: center;\r\n  justify-content: center;\r\n  background-color: black;\r\n  /* overflow: hidden */\r\n\r\n  @media screen and (max-width: 15cm) {\r\n    flex-direction: column;\r\n    justify-content: start;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst Data = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  justify-content: center;\r\n  /* align-items:center; */\r\n  z-index: 2;\r\n  width: 60%;\r\n  margin-left: 10px;\r\n  @media screen and (max-width: 15cm) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst Title = styled.h3`\r\n  font-size: 32px;\r\n  margin-bottom: 10px;\r\n  margin-right: 10px;\r\n  @media screen and (max-width: 15cm) {\r\n  }\r\n`;\r\n\r\nconst EnTitle = styled.h2`\r\n  font-size: 25px;\r\n`;\r\n\r\nconst ItemContainer = styled.div`\r\n  margin-top: 20px;\r\n  max-height: 50%;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nconst Item = styled.span``;\r\n\r\nconst Divider = styled.span`\r\n  margin: 0 10px;\r\n`;\r\n\r\nconst Overview = styled.p`\r\n  height: 100%;\r\n  font-size: 13px;\r\n  opacity: 0.6;\r\n  margin-top: 20px;\r\n  line-height: 20px;\r\n  text-indent: 5px;\r\n`;\r\n\r\nconst ContainerForContents = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-height: 100%;\r\n`;\r\n\r\nconst DetailPresenter = ({ result, error, loading, isMovie }) =>\r\n  loading ? (\r\n    <Loader />\r\n  ) : (\r\n    <Container>\r\n      <Backdrop\r\n        bgImage={\r\n          result.backdrop_path &&\r\n          `https://image.tmdb.org/t/p/original${result.backdrop_path}`\r\n        }\r\n      ></Backdrop>\r\n      <Content>\r\n        <Cover\r\n          src={\r\n            result.poster_path\r\n              ? `https://image.tmdb.org/t/p/w500${result.poster_path}`\r\n              : require(\"../../assets/noimage.jpg\").default\r\n          }\r\n        ></Cover>\r\n        <Data>\r\n          <Title>{result.title ? result.title : result.name}</Title>\r\n          <EnTitle>\r\n            {result.original_title\r\n              ? result.original_title !== result.title\r\n                ? result.original_title\r\n                : \"\"\r\n              : result.original_name !== result.name\r\n              ? result.original_name\r\n              : \"\"}\r\n          </EnTitle>\r\n          <ItemContainer>\r\n            <Item>\r\n              {result.release_date\r\n                ? result.release_date.substr(0, 4)\r\n                : result.first_air_date &&\r\n                  result.first_air_date.substr(0, 4)}{\" \"}\r\n            </Item>\r\n            <Divider>⨀</Divider>\r\n            <Item>{result.runtime || result.episode_run_time} min</Item>\r\n            <Divider>⨀</Divider>\r\n            <Item>\r\n              {result.genres &&\r\n                result.genres.map((genre, index) =>\r\n                  index === result.genres.length - 1\r\n                    ? genre.name\r\n                    : `${genre.name}/`\r\n                )}\r\n            </Item>\r\n            <Overview>{result.overview}</Overview>\r\n          </ItemContainer>\r\n          <ContainerForContents>\r\n            <DetailRoute\r\n              production_countries={result.production_countries}\r\n              production_companies={result.production_companies}\r\n              id={result.id}\r\n              videos={result.videos}\r\n              isMovie={isMovie}\r\n              imdb_id={result.imdb_id}\r\n              seasons={result.seasons}\r\n              belongs_to_collection={result.belongs_to_collection}\r\n              homepage={result.homepage}\r\n            />\r\n          </ContainerForContents>\r\n        </Data>\r\n      </Content>\r\n    </Container>\r\n  );\r\n\r\nDetailPresenter.propTypes = {\r\n  result: propTypes.object,\r\n  error: propTypes.string,\r\n  loading: propTypes.bool.isRequired,\r\n};\r\n\r\nexport default DetailPresenter;\r\n","import DetailContainer from \"./DetailContainer\";\r\n\r\nexport default DetailContainer;","import React from \"react\";\r\nimport DetailPresenter from \"./DetailPresenter\";\r\nimport { movieApi, tvApi } from \"../../api\";\r\n\r\nclass DetailContainer extends React.Component {\r\n  state = {\r\n    result: null,\r\n    error: null,\r\n    loading: true,\r\n    isMovie: false,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const {\r\n      match: {\r\n        params: { id },\r\n      },\r\n      history: { push }, //push는 해당 url로 보내는 메소드다. 자바스크립트는 메소드도 프로퍼티로 설정 가능하다는점 기억.\r\n      location: { pathname },\r\n    } = this.props;\r\n    //console.log(this.props)를 실행하면 React Router가 어떤 정보를 같이 전달했는지 확인할 수 있다.\r\n\r\n    //const parseID = parseInt(id);\r\n    //parseInt는 입력된 내용을 숫자만 남긴다. (parsing 개념). 문자만 있거나 문자가 앞에 있다면 NaN을 반환. 숫자 뒤에 문자가 있다면 숫자를 반환.\r\n    //Number()와도 비슷하지만 약간 다르다. Number는 정말 숫자만 있을경우 숫자를 반환. 문자가 조금이라도 있으면 NaN 반환.\r\n\r\n    this.state.isMovie = pathname.includes(\"/movie\"); //this를 붙여 전역변수처럼 쓰이도록 한다.\r\n    //이 isMovie는 업데이트하여 렌더링을 다시 할 일이 없기 때문에 이렇게 쓸수 있다.\r\n    //물론 isMovie를 state에 넣는 방식도 가능하다. 강의 참조.\r\n    //지금은 state에 넣는것으로 수정했음...\r\n\r\n    const parsedID = Number(id); //난 이게 더 맞는거 같아서 이거 쓰련다.\r\n    if (isNaN(parsedID)) {\r\n      return push(\"/\");\r\n      //여기 retrun을 넣어줘야 함수가 그냥 종료하게 된다. 안그러면 뒤쪽 함수가 계속 실행되므로.\r\n    }\r\n\r\n    let result = null;\r\n    try {\r\n      if (this.state.isMovie) {\r\n        ({ data: result } = await movieApi.movieDetail(parsedID)); //뭐지... 이게 되네?? ()는 const=와 같다...?\r\n      } else {\r\n        const request = await tvApi.showDetail(parsedID);\r\n        result = request.data;\r\n      }\r\n    } catch {\r\n      this.setState({ error: \"Can't find anything\" });\r\n    } finally {\r\n      this.setState({ loading: false, result });\r\n    }\r\n  }\r\n\r\n  async componentDidUpdate(props) {\r\n    if (props.match.params.id !== this.props.match.params.id) {\r\n \r\n      const {\r\n        match: {\r\n          params: { id },\r\n        },\r\n        history: { push },\r\n        location: { pathname },\r\n      } = this.props;\r\n\r\n      this.state.isMovie = pathname.includes(\"/movie\");\r\n\r\n      const parsedID = Number(id);\r\n      if (isNaN(parsedID)) {\r\n        return push(\"/\");\r\n      }\r\n\r\n      let result = null;\r\n\r\n      try {\r\n        if (this.state.isMovie) {\r\n          const request = await movieApi.movieDetail(parsedID);\r\n          result = await request.data;\r\n        } else {\r\n          const request = await tvApi.showDetail(parsedID);\r\n          result = request.data;\r\n        }\r\n      } catch {\r\n        this.setState({ error: \"Can't find anything\" });\r\n      } finally {\r\n        this.setState({ loading: false, result });\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { result, error, loading, isMovie } = this.state;\r\n    return (\r\n      <DetailPresenter\r\n        result={result}\r\n        error={error}\r\n        loading={loading}\r\n        isMovie={isMovie}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default DetailContainer;\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Route, Redirect, Switch } from \"react-router-dom\";\r\nimport Home from \"../Routes/Home\"\r\nimport Search from \"../Routes/Search\"\r\nimport TV from \"../Routes/TV\"\r\nimport Header from \"./Header\"\r\nimport Detail from \"../Routes/Detail\"\r\n\r\nfunction RenderRouter() {\r\n    return <Router>\r\n        <Header /> {/**Link는 Router안에서만 동작한다. */}\r\n        <Switch>\r\n        <Route path=\"/\" exact component ={Home} />\r\n        <Route path=\"/TV\" component ={TV} />\r\n        {/* <Route path=\"TV/Popular\" component = {()=> <h1>Popular</h1>} /> */}\r\n        <Route path=\"/Search\" component ={Search} />\r\n        <Route path=\"/movie/:id\" component = {Detail} />  {/*:id에 주의하자. */ }\r\n        <Route path=\"/show/:id\" component = {Detail} />  {/*:id에 주의하자. console.log(this.props)를 찍어보면 route가 :id를 props의 match :{params}에 넣어 전달함을 알수 있다.*/ }\r\n        <Redirect from=\"/x_movie/:Id\" to='/movie/:Id'/>\r\n        <Redirect from=\"*\" to=\"/\" />   {/* 일치하는 route가 없다면 /로 보내라(redirect) 라는 뜻 */}\r\n        </Switch>\r\n    </Router>\r\n} \r\n\r\nexport default RenderRouter;","//styled-components를 사용한 방법은 global한 style부여가 힘들다.\r\n//그래서 add styled-reset을 설치한뒤 (npm add styled-reset)\r\n//GlobalStyles.js 파일을 만든다.\r\n\r\nimport { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\nconst globalStyles = createGlobalStyle`\r\n    ${reset};\r\n    a{\r\n        text-decoration: none;\r\n        color: inherit;\r\n    }\r\n    *{\r\n        box-sizing:border-box;\r\n    }\r\n    body{\r\n        font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n        font-size: 12px;\r\n        background-color:rgba(20,20,20,1);\r\n        color:white;\r\n        padding-top:50px;\r\n        padding-bottom: 50px;\r\n    }\r\n\r\n`;\r\n\r\nexport default globalStyles;","import Router from \"./Route\"\nimport GlobalStyles from \"./GlobalStyles\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router />\n      <GlobalStyles />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n   </React.StrictMode>,\n  document.getElementById('root')\n  \n);\n\n\n"],"sourceRoot":""}